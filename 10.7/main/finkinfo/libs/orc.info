Info4: <<
Package: orc
Version: 0.4.14
Revision: 31
Description: CPU runtime optimization library
License: BSD
Maintainer: Benjamin Reed <orc@fink.raccoonfink.com>

Depends: %N-shlibs (>= %v-%r)
BuildDepends: <<
	fink (>= 0.30.2-1),
	gtk-doc (>= 1.17-2),
	pkgconfig (>= 0.23-1)
<<
BuildDependsOnly: true
InfoTest: TestScript: make check || exit 2

Source: http://code.entropywave.com/download/%n/%n-%v.tar.gz
Source-MD5: 6b3ff209e9763ebe40e152538884bd71
PatchFile: %n.patch
PatchFile-MD5: a9b5e11153fd11c22484327719695869

UseMaxBuildJobs: true
ConfigureParams: --build=%m-apple-darwin`uname -r|cut -f1 -d.` --enable-gtk-doc --mandir=%p/share/man --infodir=%p/share/info --disable-dependency-tracking
CompileScript: <<
	#!/bin/sh -ex
	
	if [ "%m" = "i386" ]; then
	export CFLAGS="$CFLAGS -O"
	export CXXFLAGS="$CXXFLAGS -O"
	elif [ "%m" = "powerpc" ]; then
	export CPPFLAGS="$CPPFLAGS -force_cpusubtype_ALL"
	export CFLAGS="$CFLAGS -Os"
	export CXXFLAGS="$CFLAGS -Os"
	else
	export CFLAGS="$CFLAGS -Os"
	export CXXFLAGS="$CFLAGS -Os"
	fi
	
	export CCACHE_DISABLE=1
	./configure %c
	make
<<

InstallScript: make -j1 install DESTDIR=%d
DocFiles: COPYING README TODO
SplitOff: <<
	Package: %N-shlibs
	Description: Shared libraries for Orc
	DocFiles: COPYING
	Files: <<
		lib/liborc-0.4.*.dylib
		lib/liborc-test-0.4.*.dylib
	<<
	Shlibs: <<
		%p/lib/liborc-0.4.0.dylib      15.0.0 %n (>= 0.4.14-1)
		%p/lib/liborc-test-0.4.0.dylib 15.0.0 %n (>= 0.4.14-1)
	<<
<<

Homepage: http://code.entropywave.com/projects/orc/
DescDetail: <<
Orc is a library and set of tools for compiling and executing very simple
programs that operate on arrays of data.  The "language" is a generic
assembly language that represents many of the features available in SIMD
architectures, including saturated addition and subtraction, and many
arithmetic operations.

Features:
* Users can create, compile, and run simple programs that use the vector
  extensions of the CPU, all directly from an application.
* Users can compile Orc programs to assembly source code to be compiled and
  used without linking against the Orc library.
* The generic assembly language can be extended by an application by adding
  new opcodes.
* An application can add rules for converting existing or new opcodes to
  binary code for a specific target.
* Current targets: SSE, MMX, ARM, Altivec, and NEON.  There is also a TI
  * c64x+ DSP target that only generates source code (no runtime).
* Programs can optionally be emulated, which is useful for testing, or if no
  rules are available to convert Orc opcodes to executable code.
<<
<<

