diff -Nurd kdelibs-4.5.1/cmake/modules/FindFAM.cmake kdelibs-4.5.1-new/cmake/modules/FindFAM.cmake
--- kdelibs-4.5.1/cmake/modules/FindFAM.cmake	2008-05-21 07:06:10.000000000 -0400
+++ kdelibs-4.5.1-new/cmake/modules/FindFAM.cmake	2010-10-01 21:39:55.000000000 -0400
@@ -16,12 +16,12 @@
   set(FAM_FIND_QUIETLY TRUE)
 endif (FAM_INCLUDE_DIR)
 
-FIND_PATH(FAM_INCLUDE_DIR fam.h)
-
-FIND_LIBRARY(FAM_LIBRARIES NAMES fam )
-
-include(FindPackageHandleStandardArgs)
-FIND_PACKAGE_HANDLE_STANDARD_ARGS(FAM DEFAULT_MSG FAM_INCLUDE_DIR FAM_LIBRARIES )
+#FIND_PATH(FAM_INCLUDE_DIR fam.h)
+#
+#FIND_LIBRARY(FAM_LIBRARIES NAMES fam )
+#
+#include(FindPackageHandleStandardArgs)
+#FIND_PACKAGE_HANDLE_STANDARD_ARGS(FAM DEFAULT_MSG FAM_INCLUDE_DIR FAM_LIBRARIES )
 
 MARK_AS_ADVANCED(FAM_INCLUDE_DIR FAM_LIBRARIES)
 
diff -Nurd kdelibs-4.5.1/cmake/modules/FindSoprano.cmake kdelibs-4.5.1-new/cmake/modules/FindSoprano.cmake
--- kdelibs-4.5.1/cmake/modules/FindSoprano.cmake	2009-12-04 18:10:02.000000000 -0500
+++ kdelibs-4.5.1-new/cmake/modules/FindSoprano.cmake	2010-10-01 21:39:55.000000000 -0400
@@ -46,14 +46,14 @@
 include(FindLibraryWithDebug)
 
 find_program(SOPRANO_SOPRANOCMD_EXECUTABLE
-  NAMES sopranocmd 
+  NAMES sopranocmd-@KDETYPE@
   HINTS
   ${BIN_INSTALL_DIR}
   ${KDE4_BIN_INSTALL_DIR}
   )
 
 find_program(SOPRANO_ONTO2VOCABULARYCLASS_EXECUTABLE
-  NAMES onto2vocabularyclass
+  NAMES onto2vocabularyclass-@KDETYPE@
   HINTS
   ${BIN_INSTALL_DIR}
   ${KDE4_BIN_INSTALL_DIR}
diff -Nurd kdelibs-4.5.1/config.h.cmake kdelibs-4.5.1-new/config.h.cmake
--- kdelibs-4.5.1/config.h.cmake	2010-08-27 04:09:18.000000000 -0400
+++ kdelibs-4.5.1-new/config.h.cmake	2010-10-01 21:39:55.000000000 -0400
@@ -74,6 +74,7 @@
 #cmakedefine HAVE_UNISTD_H 1
 #cmakedefine HAVE_ARPA_NAMESER_COMPAT_H
 #cmakedefine HAVE_ARPA_NAMESER8_COMPAT_H
+#cmakedefine HAVE_ARPA_NAMESER_COMPAT_H
 #cmakedefine HAVE_LANGINFO_H 1
 
 #cmakedefine HAVE_XTEST 1
@@ -92,7 +93,9 @@
 #cmakedefine   HAVE_GETMNTINFO 1
 #cmakedefine   HAVE_GETPAGESIZE 1
 #cmakedefine   HAVE_INITGROUPS 1
+#ifndef __APPLE__
 #cmakedefine   HAVE_FDATASYNC 1
+#endif
 #cmakedefine   HAVE_MADVISE 1
 #cmakedefine   HAVE_MMAP 1
 #cmakedefine   HAVE_MKSTEMPS 1
diff -Nurd kdelibs-4.5.1/doc/api/Doxyfile.local kdelibs-4.5.1-new/doc/api/Doxyfile.local
--- kdelibs-4.5.1/doc/api/Doxyfile.local	2008-10-30 10:18:53.000000000 -0400
+++ kdelibs-4.5.1-new/doc/api/Doxyfile.local	2010-10-01 21:39:55.000000000 -0400
@@ -173,6 +173,7 @@
         Q_WS_MAC="" \
 	Q_OS_UNIX="" \
         Q_OS_WIN="" \
+        Q_OS_DARWIN="" \
         Q_OS_MACX="" \
 \
 	Q_SLOTS="slots" \
diff -Nurd kdelibs-4.5.1/kde3support/kdecore/k3processcontroller.cpp kdelibs-4.5.1-new/kde3support/kdecore/k3processcontroller.cpp
--- kdelibs-4.5.1/kde3support/kdecore/k3processcontroller.cpp	2008-05-21 07:06:17.000000000 -0400
+++ kdelibs-4.5.1-new/kde3support/kdecore/k3processcontroller.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -114,7 +114,7 @@
 
 K3ProcessController::~K3ProcessController()
 {
-#ifndef Q_OS_MAC
+#if !defined(Q_OS_DARWIN) && !defined(Q_OS_MAC)
 /* not sure why, but this is causing lockups */
   close( d->fd[0] );
   close( d->fd[1] );
diff -Nurd kdelibs-4.5.1/kde4-check-sycoca.sh kdelibs-4.5.1-new/kde4-check-sycoca.sh
--- kdelibs-4.5.1/kde4-check-sycoca.sh	1969-12-31 19:00:00.000000000 -0500
+++ kdelibs-4.5.1-new/kde4-check-sycoca.sh	2010-10-01 21:39:55.000000000 -0400
@@ -0,0 +1,18 @@
+#!/bin/sh
+
+if [ `id -u` -eq 0 ] || [ `id -un | grep -c -E '^fink-bld$'` -gt 0 ]; then
+	# skip root and fink build account
+	exit 0
+fi
+
+FULLPREFIX="@KDEPREFIX@/opt/kde4/@KDETYPE@"
+GLOBAL_SYCOCA_DIR="$FULLPREFIX/var/fink"
+LOCAL_SYCOCA_DIR="$HOME/.cache/kde4-@KDETYPE@-fink"
+TOUCHFILE="kbuildsycoca-updated"
+
+mkdir -p "$LOCAL_SYCOCA_DIR"
+
+if [ ! -e "$LOCAL_SYCOCA_DIR/$TOUCHFILE" ] || [ "$GLOBAL_SYCOCA_DIR/$TOUCHFILE" -nt "$LOCAL_SYCOCA_DIR/$TOUCHFILE" ];then
+	echo "* you've installed KDE4 (@KDETYPE@) applications since last time you ran init -- updating desktop cache"
+	("$FULLPREFIX/bin/kbuildsycoca4" >"$LOCAL_SYCOCA_DIR/kbuildsycoca4.log" 2>&1 && touch "$LOCAL_SYCOCA_DIR/$TOUCHFILE") &
+fi
diff -Nurd kdelibs-4.5.1/kde4-postinst.sh kdelibs-4.5.1-new/kde4-postinst.sh
--- kdelibs-4.5.1/kde4-postinst.sh	1969-12-31 19:00:00.000000000 -0500
+++ kdelibs-4.5.1-new/kde4-postinst.sh	2010-10-01 21:39:55.000000000 -0400
@@ -0,0 +1,81 @@
+#!/bin/sh
+
+if [ `id -u` -ne 0 ]; then
+	echo "you must run this as root!"
+	exit 1
+fi
+
+PREFIX="@KDEPREFIX@"
+TYPE="@KDETYPE@"
+FULLPREFIX="@KDEPREFIX@/opt/kde4/@KDETYPE@"
+KDE4RCFILE="$FULLPREFIX/etc/kde4rc"
+TEMPPATH="/tmp/kb$$"
+LOGFILE="$TEMPPATH/kde4-postinst.log"
+
+mkdir -p "$TEMPPATH"
+cd "$TEMPPATH"
+
+echo >$LOGFILE
+
+echo "== figuring out KDE directories from $KDE4RCFILE ==" >>$LOGFILE
+PREFIXES=`grep '^prefixes=' "$KDE4RCFILE" | cut -d= -f2-`
+orig_IFS=$IFS
+IFS=","
+for PRE in $PREFIXES; do
+	export _KDEDIRS="$_KDEDIRS:$PRE"
+	export _XDG_DATA_DIRS="$_XDG_DATA_DIRS:$PRE/share"
+	export _XDG_CONFIG_DIRS="$_XDG_CONFIG_DIRS:$PRE/etc/xdg"
+done
+IFS=$orig_IFS
+
+KDEDIRS=`echo $_KDEDIRS:$KDEDIRS | sed -e 's,^:,,' -e 's,:$,,'`
+XDG_DATA_DIRS=`echo $_XDG_DATA_DIRS:$XDG_DATA_DIRS | sed -e 's,^:,,' -e 's,:$,,'`
+XDG_CONFIG_DIRS=`echo $_XDG_CONFIG_DIRS:$XDG_CONFIG_DIRS | sed -e 's,^:,,' -e 's,:$,,'`
+export KDEDIRS XDG_DATA_DIRS XDG_CONFIG_DIRS
+
+echo "KDEDIRS=$KDEDIRS" >>$LOGFILE
+echo "XDG_DATA_DIRS=$XDG_DATA_DIRS" >>$LOGFILE
+echo "XDG_CONFIG_DIRS=$XDG_CONFIG_DIRS" >>$LOGFILE
+
+echo "== marking sycoca database as dirty ==" >>$LOGFILE 2>&1
+mkdir -p "$FULLPREFIX/var/fink"
+touch "$FULLPREFIX/var/fink/kbuildsycoca-updated"
+
+echo "== running update-desktop-database ==" >>$LOGFILE 2>&1
+"$PREFIX/bin/update-desktop-database" --verbose `echo $KDEDIRS: | sed -e 's,:,/share/applications ,g'` >>$LOGFILE 2>&1
+
+IFS=":"
+for DIR in $KDEDIRS; do
+	if [ -d "$DIR/share/mime" ]; then
+		echo "== running update-mime-database on $DIR ==" >>$LOGFILE 2>&1
+		"$PREFIX/bin/update-mime-database" -V "$DIR/share/mime" >>$LOGFILE 2>&1
+	fi
+done
+IFS=$orig_IFS
+
+[ -z "$DO_SYMLINK_UPDATE" ] && export DO_SYMLINK_UPDATE=1
+
+if [ $DO_SYMLINK_UPDATE -eq 1 ]; then
+	mkdir -p "$PREFIX/share/dbus-1/interfaces"
+
+	IFS=":"
+	for DIR in $KDEDIRS; do
+		if [ -d "$DIR/share/dbus-1/interfaces" ] && [ "$DIR" != "$PREFIX" ]; then
+			cd "$DIR/share/dbus-1/interfaces"
+			for file in *.xml; do
+				ln -sf "$DIR/share/dbus-1/interfaces/$file" "$PREFIX/share/dbus-1/interfaces/$file"
+			done
+		fi
+	done
+	IFS=$orig_IFS
+	for file in "$PREFIX/share/dbus-1/interfaces"/*.xml; do
+		if [ ! -f "$file" ]; then
+			rm -rf "$file"
+		fi
+	done
+fi
+
+echo ""
+echo "== KDE4 Applications Have Been Updated =="
+echo "You should start a new shell, or run $FULLPREFIX/bin/kde4-check-sycoca.sh to update the KDE4 application database."
+echo ""
diff -Nurd kdelibs-4.5.1/kdecore/config/kconfig.cpp kdelibs-4.5.1-new/kdecore/config/kconfig.cpp
--- kdelibs-4.5.1/kdecore/config/kconfig.cpp	2010-06-16 08:03:24.000000000 -0400
+++ kdelibs-4.5.1-new/kdecore/config/kconfig.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -70,7 +70,7 @@
 #ifdef Q_WS_WIN
             QFile::decodeName( qgetenv("WINDIR") + "/kde4rc" );
 #else
-        QLatin1String("/etc/kde4rc");
+        QLatin1String("@KDEPREFIX@/lib/@KDETYPE@/etc/kde4rc");
 #endif
         if (!KStandardDirs::checkAccess(etc_kderc, R_OK)) {
             etc_kderc.clear();
diff -Nurd kdelibs-4.5.1/kdecore/kernel/kkernel_mac.cpp kdelibs-4.5.1-new/kdecore/kernel/kkernel_mac.cpp
--- kdelibs-4.5.1/kdecore/kernel/kkernel_mac.cpp	2009-01-06 12:27:48.000000000 -0500
+++ kdelibs-4.5.1-new/kdecore/kernel/kkernel_mac.cpp	2010-10-01 21:42:39.000000000 -0400
@@ -21,7 +21,7 @@
 
 #include <config.h>
 
-#ifdef Q_OS_MACX
+#if (defined (Q_OS_DARWIN) || defined (Q_OS_MAC))
 
 #include <unistd.h>
 #include <string.h>
@@ -136,13 +136,17 @@
 	if (dbus_initialized)
 		return;
 
+	kDebug() << "initializing D-Bus";
+
+	kDebug() << "trying DBUS_SESSION_BUS_ADDRESS";
 	QString dbusVar = qgetenv("DBUS_SESSION_BUS_ADDRESS");
 	if (!dbusVar.isEmpty()) {
 		dbus_initialized = true;
 		return;
 	}
 
-	dbusVar = QFile::decodeName(qgetenv("DBUS_LAUNCHD_SESSION_BUS_SOCKET"));
+	kDebug() << "trying DBUS_FINK_SESSION_BUS_ADDRESS";
+	dbusVar = QFile::decodeName(qgetenv("DBUS_FINK_SESSION_BUS_SOCKET"));
 	if (mac_set_dbus_address(dbusVar)) {
 		dbus_initialized = true;
 		return;
@@ -155,36 +159,46 @@
 	for (int i = 0; i < path.size(); ++i) {
 		QString testLaunchctl = QString(path.at(i)).append("/launchctl");
 		if (QFile(testLaunchctl).exists()) {
+			kDebug() << "found launchctl at " << testLaunchctl;
 			externalProc = testLaunchctl;
 			break;
 		}
 	}
 
 	if (!externalProc.isEmpty()) {
-                QProcess qp;
-                qp.setTextModeEnabled(true);
+		QProcess qp;
+		qp.setTextModeEnabled(true);
 
-		qp.start(externalProc, QStringList() << "getenv" << "DBUS_LAUNCHD_SESSION_BUS_SOCKET");
-                if (!qp.waitForFinished(timeout)) {
-                    kDebug() << "error running" << externalProc << qp.errorString();
-                    return;
-                }
-                if (qp.exitCode() != 0) {
-                    kDebug() << externalProc << "unsuccessful:" << qp.readAllStandardError();
-                    return;
-                }
+		kDebug() << "loading dbus-session.plist";
+		qp.start(externalProc, QStringList() << "load" << "@KDEPREFIX@/share/dbus/launchd/org.finkproject.dbus-session.plist");
+		if (!qp.waitForFinished(timeout)) {
+			kDebug() << "error running" << externalProc << qp.errorString();
+		}
 
-                QString line = qp.readLine().trimmed(); // read the first line
-                if (mac_set_dbus_address(line))
-                    dbus_initialized = true; // hooray
+		kDebug() << "calling getenv on DBUS_FINK_SESSION_BUS_SOCKET";
+		qp.start(externalProc, QStringList() << "getenv" << "DBUS_FINK_SESSION_BUS_SOCKET");
+		if (!qp.waitForFinished(timeout)) {
+			kDebug() << "error running" << externalProc << qp.errorString();
+			return;
+		}
+		if (qp.exitCode() != 0) {
+			kDebug() << externalProc << "unsuccessful:" << qp.readAllStandardError();
+			return;
+		}
+
+		QString line = qp.readLine().trimmed(); // read the first line
+		if (mac_set_dbus_address(line))
+			dbus_initialized = true; // hooray
 	}
 
 	if (dbus_initialized == false) {
 		kDebug() << "warning: unable to initialize D-Bus environment!";
 	}
 
+	kDebug() << "finished initializing";
 }
 
+
 QString mac_app_filename() {
 	static QString appFileName;
 	if (appFileName.isEmpty()) {
diff -Nurd kdelibs-4.5.1/kdecore/kernel/kkernel_mac.cpp.orig kdelibs-4.5.1-new/kdecore/kernel/kkernel_mac.cpp.orig
--- kdelibs-4.5.1/kdecore/kernel/kkernel_mac.cpp.orig	1969-12-31 19:00:00.000000000 -0500
+++ kdelibs-4.5.1-new/kdecore/kernel/kkernel_mac.cpp.orig	2010-10-01 21:39:55.000000000 -0400
@@ -0,0 +1,219 @@
+/*
+   This file is part of the KDE libraries
+   Copyright (C) 2008 Benjamin Reed <rangerrick@befunk.com>
+
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public
+   License version 2 as published by the Free Software Foundation.
+
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+
+   You should have received a copy of the GNU Library General Public License
+   along with this library; see the file COPYING.LIB.  If not, write to
+   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.
+*/
+
+#include "kkernel_mac.h"
+
+#include <config.h>
+
+#if (defined (Q_OS_DARWIN) || defined (Q_OS_MAC))
+
+#include <unistd.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/param.h>
+#include <crt_externs.h>
+#include <mach-o/dyld.h>
+
+#include <CoreFoundation/CFBundle.h>
+#include <CoreFoundation/CFString.h>
+#include <CoreFoundation/CFURL.h>
+#include <QtCore/QFile>
+#include <QtCore/QProcess>
+#include <QtCore/QStringList>
+#include <QtCore/qvarlengtharray.h>
+#include <kstandarddirs.h>
+#include <ksharedconfig.h>
+#include <kconfig.h>
+#include <kdebug.h>
+
+int timeout = 3000; // msec
+
+bool dbus_initialized = false;
+
+/**
+  qAppFileName() is not public in qt4/mac, so we need to redo it here
+*/
+
+static QString convert_CFString_to_QString(CFStringRef str) {
+	CFIndex length = CFStringGetLength(str);
+	const UniChar *chars = CFStringGetCharactersPtr(str);
+	if (chars)
+		return QString(reinterpret_cast<const QChar *>(chars), length);
+
+	QVarLengthArray<UniChar> buffer(length);
+	CFStringGetCharacters(str, CFRangeMake(0, length), buffer.data());
+	return QString(reinterpret_cast<const QChar *>(buffer.constData()), length);
+}
+
+/**
+ Calling CoreFoundation APIs (which is unavoidable in Qt/Mac) has always had issues
+ on Mac OS X, but as of 10.5 is explicitly disallowed with an exception.  As a
+ result, in the case where we would normally fork and then dlopen code, or continue
+ to run other code, we must now fork-and-exec.
+ 
+ See "CoreFoundation and fork()" at http://developer.apple.com/releasenotes/CoreFoundation/CoreFoundation.html
+*/
+
+void
+mac_fork_and_reexec_self()
+{
+	int argc = *_NSGetArgc();
+	char ** argv = *_NSGetArgv();
+	char * newargv[argc+2];
+	char progname[PATH_MAX];
+	uint32_t buflen = PATH_MAX;
+	_NSGetExecutablePath(progname, &buflen);
+	bool found_psn = false;
+
+	for (int i = 0; i < argc; i++) {
+		newargv[i] = argv[i];
+	}
+
+	newargv[argc] = "--nofork";
+	newargv[argc+1] = NULL;
+
+	int x_fork_result = fork();
+	switch(x_fork_result) {
+
+		case -1:
+#ifndef NDEBUG
+			fprintf(stderr, "Mac OS X workaround fork() failed!\n");
+#endif
+			::_exit(255);
+			break;
+
+		case 0:
+			// Child
+			execvp(progname, newargv);
+			break;
+
+		default:
+			// Parent
+			_exit(0);
+			break;
+
+	}
+}
+
+/**
+ Set the D-Bus environment based on session bus socket
+*/
+
+bool mac_set_dbus_address(QString value)
+{
+	if (!value.isEmpty() && QFile::exists(value) && (QFile::permissions(value) & QFile::WriteUser)) {
+		value = "unix:path=" + value;
+		::setenv("DBUS_SESSION_BUS_ADDRESS", value.toLocal8Bit(), 1);
+		kDebug() << "set session bus address to" << value;
+		return true;
+	}
+	return false;
+}
+
+/**
+ Make sure D-Bus is initialized, by any means necessary.
+*/
+
+void mac_initialize_dbus()
+{
+	if (dbus_initialized)
+		return;
+
+	QString dbusVar = qgetenv("DBUS_SESSION_BUS_ADDRESS");
+	if (!dbusVar.isEmpty()) {
+		dbus_initialized = true;
+		return;
+	}
+
+	dbusVar = QFile::decodeName(qgetenv("DBUS_FINK_SESSION_BUS_SOCKET"));
+	if (mac_set_dbus_address(dbusVar)) {
+		dbus_initialized = true;
+		return;
+	}
+
+	QString externalProc;
+	QStringList path = QFile::decodeName(qgetenv("KDEDIRS")).split(':').replaceInStrings(QRegExp("$"), "/bin");
+	path << QFile::decodeName(qgetenv("PATH")).split(':') << "/usr/local/bin";
+
+	for (int i = 0; i < path.size(); ++i) {
+		QString testLaunchctl = QString(path.at(i)).append("/launchctl");
+		if (QFile(testLaunchctl).exists()) {
+			externalProc = testLaunchctl;
+			break;
+		}
+	}
+
+	if (!externalProc.isEmpty()) {
+		QProcess qp;
+		qp.setTextModeEnabled(true);
+
+		qp.start(externalProc, QStringList() << "load" << "@KDEPREFIX@/share/dbus/launchd/org.finkproject.dbus-session.plist");
+		if (!qp.waitForFinished(timeout)) {
+			kDebug() << "error running" << externalProc << qp.errorString();
+		}
+
+		qp.start(externalProc, QStringList() << "getenv" << "DBUS_FINK_SESSION_BUS_SOCKET");
+		if (!qp.waitForFinished(timeout)) {
+			kDebug() << "error running" << externalProc << qp.errorString();
+			return;
+		}
+		if (qp.exitCode() != 0) {
+			kDebug() << externalProc << "unsuccessful:" << qp.readAllStandardError();
+			return;
+		}
+
+		QString line = qp.readLine().trimmed(); // read the first line
+		if (mac_set_dbus_address(line))
+			dbus_initialized = true; // hooray
+	}
+
+	if (dbus_initialized == false) {
+		kDebug() << "warning: unable to initialize D-Bus environment!";
+	}
+
+}
+
+
+QString mac_app_filename() {
+	static QString appFileName;
+	if (appFileName.isEmpty()) {
+		CFURLRef bundleURL = NULL;
+		CFBundleRef bundle = NULL;
+		CFStringRef bundlePath = NULL;
+
+		bundle = CFBundleGetMainBundle();
+		if (bundle) {
+			bundleURL = CFBundleCopyBundleURL(bundle);
+			bundlePath = CFURLCopyFileSystemPath(bundleURL, kCFURLPOSIXPathStyle);
+
+			if (bundleURL) {
+				CFRelease(bundleURL);
+			}
+
+			if (bundlePath) {
+				appFileName = convert_CFString_to_QString(bundlePath);
+				CFRelease(bundlePath);
+			}
+		}
+	}
+	return appFileName;
+}
+
+#endif
diff -Nurd kdelibs-4.5.1/kdecore/kernel/kkernel_mac.cpp.rej kdelibs-4.5.1-new/kdecore/kernel/kkernel_mac.cpp.rej
--- kdelibs-4.5.1/kdecore/kernel/kkernel_mac.cpp.rej	1969-12-31 19:00:00.000000000 -0500
+++ kdelibs-4.5.1-new/kdecore/kernel/kkernel_mac.cpp.rej	2010-10-01 21:41:59.000000000 -0400
@@ -0,0 +1,27 @@
+***************
+*** 164,174 ****
+  		QProcess qp;
+  		qp.setTextModeEnabled(true);
+  
+  		qp.start(externalProc, QStringList() << "load" << "/32sw/share/dbus/launchd/org.finkproject.dbus-session.plist");
+  		if (!qp.waitForFinished(timeout)) {
+  			kDebug() << "error running" << externalProc << qp.errorString();
+  		}
+  
+  		qp.start(externalProc, QStringList() << "getenv" << "DBUS_FINK_SESSION_BUS_SOCKET");
+  		if (!qp.waitForFinished(timeout)) {
+  			kDebug() << "error running" << externalProc << qp.errorString();
+--- 169,181 ----
+  		QProcess qp;
+  		qp.setTextModeEnabled(true);
+  
++ 		kDebug() << "loading dbus-session.plist";
+  		qp.start(externalProc, QStringList() << "load" << "/32sw/share/dbus/launchd/org.finkproject.dbus-session.plist");
+  		if (!qp.waitForFinished(timeout)) {
+  			kDebug() << "error running" << externalProc << qp.errorString();
+  		}
+  
++ 		kDebug() << "calling getenv on DBUS_FINK_SESSION_BUS_SOCKET";
+  		qp.start(externalProc, QStringList() << "getenv" << "DBUS_FINK_SESSION_BUS_SOCKET");
+  		if (!qp.waitForFinished(timeout)) {
+  			kDebug() << "error running" << externalProc << qp.errorString();
diff -Nurd kdelibs-4.5.1/kdecore/kernel/kkernel_mac.h kdelibs-4.5.1-new/kdecore/kernel/kkernel_mac.h
--- kdelibs-4.5.1/kdecore/kernel/kkernel_mac.h	2009-01-01 11:28:04.000000000 -0500
+++ kdelibs-4.5.1-new/kdecore/kernel/kkernel_mac.h	2010-10-01 21:39:55.000000000 -0400
@@ -21,7 +21,7 @@
 
 #include <QtCore/qglobal.h> // defines Q_OS_MACX
 
-#ifdef Q_OS_MACX
+#if (defined (Q_OS_DARWIN) || defined (Q_OS_MAC))
 
 #include <kdecore_export.h>
 #include <QtCore/QString>
@@ -50,5 +50,5 @@
   */
 KDECORE_EXPORT QString mac_app_filename();
 
-#endif  // Q_OS_MACX
+#endif  // MAC
 #endif  // KKERNEL_MAC_H
diff -Nurd kdelibs-4.5.1/kdecore/localization/klocale.cpp kdelibs-4.5.1-new/kdecore/localization/klocale.cpp
--- kdelibs-4.5.1/kdecore/localization/klocale.cpp	2010-06-16 08:03:24.000000000 -0400
+++ kdelibs-4.5.1-new/kdecore/localization/klocale.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -2426,7 +2426,7 @@
     // workaround
 
     QByteArray systemLocale = nl_langinfo(CODESET);
-#if defined(Q_OS_MAC)
+#if (defined(Q_OS_DARWIN) || defined(Q_OS_MAC))
     // Mac OX X is UTF-8, always.
     systemLocale = "UTF-8";
 #endif //Q_OS_MAC
diff -Nurd kdelibs-4.5.1/kdecore/tests/kconfigtest.cpp kdelibs-4.5.1-new/kdecore/tests/kconfigtest.cpp
--- kdelibs-4.5.1/kdecore/tests/kconfigtest.cpp	2010-03-03 13:30:55.000000000 -0500
+++ kdelibs-4.5.1-new/kdecore/tests/kconfigtest.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -435,7 +435,7 @@
   QCOMPARE(group.readPathEntry("homePath2", QString()), QString("file://") + HOMEPATH );
   QVERIFY(group.hasKey("URL"));
   QCOMPARE(group.readEntry("URL", QString()), QString("file://") + HOMEPATH );
-#if !defined(Q_OS_WIN32) && !defined(Q_OS_MAC)
+#if !defined(Q_OS_WIN32) && !defined(Q_OS_DARWIN) && !defined(Q_OS_MAC)
   // I don't know if this will work on windows
   // This test hangs on OS X
   QVERIFY(group.hasKey("hostname"));
diff -Nurd kdelibs-4.5.1/kdeui/kernel/kapplication.cpp kdelibs-4.5.1-new/kdeui/kernel/kapplication.cpp
--- kdelibs-4.5.1/kdeui/kernel/kapplication.cpp	2010-08-04 15:12:55.000000000 -0400
+++ kdelibs-4.5.1-new/kdeui/kernel/kapplication.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -96,6 +96,9 @@
 #include <Carbon/Carbon.h>
 #include <QImage>
 #include <ksystemtrayicon.h>
+#endif
+
+#if defined(Q_OS_DARWIN) || defined (Q_OS_MAC)
 #include <kkernel_mac.h>
 #endif
 
@@ -459,7 +462,7 @@
      ::exit(127);
   }
 
-#ifdef Q_WS_MAC
+#if defined(Q_OS_DARWIN) || defined (Q_OS_MAC)
   mac_initialize_dbus();
 #endif
 
diff -Nurd kdelibs-4.5.1/kdeui/util/kpassivepopup.cpp kdelibs-4.5.1-new/kdeui/util/kpassivepopup.cpp
--- kdelibs-4.5.1/kdeui/util/kpassivepopup.cpp	2009-12-31 08:29:27.000000000 -0500
+++ kdelibs-4.5.1-new/kdeui/util/kpassivepopup.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -49,7 +49,11 @@
 
 static const int DEFAULT_POPUP_TYPE = KPassivePopup::Boxed;
 static const int DEFAULT_POPUP_TIME = 6*1000;
+#ifdef __APPLE__
+static const Qt::WindowFlags POPUP_FLAGS = Qt::Dialog | Qt::X11BypassWindowManagerHint | Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint;
+#else
 static const Qt::WindowFlags POPUP_FLAGS = Qt::Tool | Qt::X11BypassWindowManagerHint | Qt::WindowStaysOnTopHint | Qt::FramelessWindowHint;
+#endif
 
 class KPassivePopup::Private
 {
@@ -127,6 +131,10 @@
     if( d->popupStyle == Boxed )
     {
         setFrameStyle( QFrame::Box| QFrame::Plain );
+#ifdef Q_OS_MAC
+        setAttribute( Qt::WA_ShowWithoutActivating );
+        setAttribute( Qt::WA_MacAlwaysShowToolWindow );
+#endif
         setLineWidth( 2 );
     }
     else if( d->popupStyle == Balloon )
diff -Nurd kdelibs-4.5.1/kdeui/windowmanagement/kwindowinfo_mac.cpp kdelibs-4.5.1-new/kdeui/windowmanagement/kwindowinfo_mac.cpp
--- kdelibs-4.5.1/kdeui/windowmanagement/kwindowinfo_mac.cpp	2009-07-17 17:46:29.000000000 -0400
+++ kdelibs-4.5.1-new/kdeui/windowmanagement/kwindowinfo_mac.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -59,14 +59,14 @@
 {
     ProcessInfoRec pinfo;
     char processName[512];
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
     FSSpec appSpec;
 #else
     FSRef ref;
 #endif
     pinfo.processInfoLength = sizeof pinfo;
     pinfo.processName = (unsigned char*) processName;
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
     pinfo.processAppSpec = &appSpec;
 #else
     pinfo.processAppRef = &ref;
@@ -82,7 +82,7 @@
         }
     }
 
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
     iconSpec = appSpec;
 
     FSRef ref;
@@ -100,7 +100,7 @@
         ref = parentRef;
         FSGetCatalogInfo(&ref, kFSCatInfoNone, 0, &name, 0, &parentRef);
         if (QString::fromUtf16(name.unicode, name.length) == "Contents") {
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
             FSSpec spec;
             ref = parentRef;
             FSGetCatalogInfo(&ref, kFSCatInfoNone, 0, &name, &spec, &parentRef);
diff -Nurd kdelibs-4.5.1/kdeui/windowmanagement/kwindowinfo_mac_p.h kdelibs-4.5.1-new/kdeui/windowmanagement/kwindowinfo_mac_p.h
--- kdelibs-4.5.1/kdeui/windowmanagement/kwindowinfo_mac_p.h	2009-05-27 15:54:57.000000000 -0400
+++ kdelibs-4.5.1-new/kdeui/windowmanagement/kwindowinfo_mac_p.h	2010-10-01 21:39:55.000000000 -0400
@@ -43,7 +43,7 @@
     pid_t pid() const { return m_pid; }
     void setProcessSerialNumber(const ProcessSerialNumber& psn);
     QString name;
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
     FSSpec iconSpec;
 #else
     FSRef iconSpec;
diff -Nurd kdelibs-4.5.1/kdeui/windowmanagement/kwindowsystem_mac.cpp kdelibs-4.5.1-new/kdeui/windowmanagement/kwindowsystem_mac.cpp
--- kdelibs-4.5.1/kdeui/windowmanagement/kwindowsystem_mac.cpp	2009-07-17 17:46:29.000000000 -0400
+++ kdelibs-4.5.1-new/kdeui/windowmanagement/kwindowsystem_mac.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -141,7 +141,7 @@
 
     m_noEmit = false;
 
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
     // register callbacks for application launches/quits
     m_eventTarget = GetApplicationEventTarget();
     m_eventHandler = NewEventHandlerUPP(applicationEventHandler);
@@ -158,7 +158,7 @@
 }
 
 void KWindowSystemPrivate::applicationLaunched(const ProcessSerialNumber& psn) {
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
     kDebug(240) << "new app: " << psn.lowLongOfPSN << ":" << psn.highLongOfPSN;
     ProcessInfoRec pinfo;
     FSSpec appSpec;
@@ -425,7 +425,7 @@
         }
         IconRef icon;
         SInt16 label;
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
         OSErr err = GetIconRefFromFile(&info.d->iconSpec, &icon, &label);
 #else
         OSStatus err = GetIconRefFromFileInfo(&info.d->iconSpec, 0, 0,
@@ -473,7 +473,7 @@
 
 void KWindowSystem::setType( WId winid, NET::WindowType windowType )
 {
-#ifdef Q_OS_MAC32
+#if (defined(Q_OS_DARWIN32) || defined(Q_OS_MAC32))
     // not supported for 'global' windows; only for windows in the current process
     if (hasWId(winid)) return;
 
diff -Nurd kdelibs-4.5.1/kimgio/CMakeLists.txt kdelibs-4.5.1-new/kimgio/CMakeLists.txt
--- kdelibs-4.5.1/kimgio/CMakeLists.txt	2010-02-03 03:50:40.000000000 -0500
+++ kdelibs-4.5.1-new/kimgio/CMakeLists.txt	2010-10-01 21:39:55.000000000 -0400
@@ -104,7 +104,7 @@
     add_definitions(${OPENEXR_DEFINITIONS})
     set(kimg_exr_LIB_SRCS exr.cpp)
     kde4_add_plugin(kimg_exr ${kimg_exr_LIB_SRCS})
-    target_link_libraries(kimg_exr ${KDE4_KDECORE_LIBS} ${QT_QTGUI_LIBRARY} ${OPENEXR_LIBRARIES} )
+    target_link_libraries(kimg_exr ${KDE4_KDECORE_LIBS} ${QT_QTGUI_LIBRARY} ${OPENEXR_LIBRARIES} z )
 
 install(TARGETS kimg_exr  DESTINATION ${PLUGIN_INSTALL_DIR}/plugins/imageformats/ )
 install( FILES exr.desktop DESTINATION  ${SERVICES_INSTALL_DIR}/qimageioplugins/ )
diff -Nurd kdelibs-4.5.1/kinit/helper.cpp kdelibs-4.5.1-new/kinit/helper.cpp
--- kdelibs-4.5.1/kinit/helper.cpp	1969-12-31 19:00:00.000000000 -0500
+++ kdelibs-4.5.1-new/kinit/helper.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -0,0 +1,42 @@
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <QFile>
+#include <QLibrary>
+
+typedef int (*handler) (int, char *[]);
+
+int main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        fprintf(stderr, "Too few arguments\n");
+        exit(1);
+    }
+
+    QString libpath = QFile::decodeName(argv[argc-1]);
+    QLibrary l(libpath);
+
+    if (!libpath.isEmpty() && (!l.load() || !l.isLoaded()))
+    {
+        QString ltdlError = l.errorString();
+        fprintf(stderr, "Could not open library %s: %s\n", qPrintable(libpath), qPrintable(ltdlError) );
+        exit(1);
+    }
+
+    void * sym = l.resolve( "kdeinitmain");
+    if (!sym)
+    {
+        sym = l.resolve( "kdemain" );
+        if ( !sym )
+        {
+            QString ltdlError = l.errorString();
+            fprintf(stderr, "Could not find kdemain: %s\n", qPrintable(ltdlError) );
+            exit(1);
+        }
+    }
+
+    handler func = (int (*)(int, char *[])) sym;
+    exit( func(argc - 1, argv)); /* Launch! */
+}
+
diff -Nurd kdelibs-4.5.1/kinit/kinit.cpp kdelibs-4.5.1-new/kinit/kinit.cpp
--- kdelibs-4.5.1/kinit/kinit.cpp	2010-06-01 14:19:11.000000000 -0400
+++ kdelibs-4.5.1-new/kinit/kinit.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -73,7 +73,7 @@
 #endif
 #endif
 
-#ifdef Q_WS_MACX
+#if defined(Q_OS_DARWIN) || defined (Q_OS_MAC)
 #include <kkernel_mac.h>
 #endif
 
@@ -534,6 +534,14 @@
       init_startup_info( startup_id, name, envc, envs );
 #endif
 
+  // Don't run this inside the child process, it crashes on OS/X 10.6
+  const QByteArray docPath = QFile::encodeName(KGlobalSettings::documentPath());
+  const QString helperpath = s_instance->dirs()->findExe(QString::fromLatin1("kdeinit4_helper"));
+#ifdef Q_WS_MAC
+  const QString bundlepath = s_instance->dirs()->findExe(QFile::decodeName(execpath));
+  const QString argvexe = s_instance->dirs()->findExe(QString::fromLatin1(_name));
+#endif
+
   d.errorMsg = 0;
   d.fork = fork();
   switch(d.fork) {
@@ -559,7 +567,6 @@
      if (cwd && *cwd) {
          (void)chdir(cwd);
      } else {
-         const QByteArray docPath = QFile::encodeName(KGlobalSettings::documentPath());
          (void)chdir(docPath.constData());
      }
 
@@ -595,9 +602,9 @@
      {
        int r;
        QByteArray procTitle;
-       d.argv = (char **) malloc(sizeof(char *) * (argc+1));
+       d.argv = (char **) malloc(sizeof(char *) * (argc+2));
        d.argv[0] = (char *) _name;
-#ifdef Q_WS_MAC
+#if defined(Q_OS_DARWIN) || defined (Q_OS_MAC)
        QString argvexe = s_instance->dirs()->findExe(QString::fromLatin1(d.argv[0]));
        if (!argvexe.isEmpty()) {
           QByteArray cstr = argvexe.toLocal8Bit();
@@ -674,7 +681,6 @@
 
         QByteArray executable = execpath;
 #ifdef Q_WS_MAC
-        QString bundlepath = s_instance->dirs()->findExe(QFile::decodeName(executable));
         if (!bundlepath.isEmpty())
            executable = QFile::encodeName(bundlepath);
 #endif
@@ -688,25 +694,13 @@
         exit(255);
      }
 
-     void * sym = l.resolve( "kdeinitmain");
-     if (!sym )
-        {
-        sym = l.resolve( "kdemain" );
-        if ( !sym )
-           {
-            QString ltdlError = l.errorString();
-            fprintf(stderr, "Could not find kdemain: %s\n", qPrintable(ltdlError) );
-              QString errorMsg = i18n("Could not find 'kdemain' in '%1'.\n%2",
-                                      libpath, ltdlError);
-              exitWithErrorMsg(errorMsg);
-           }
-        }
-
-     d.result = 0; // Success
+     d.result = 2; // Try execing
      write(d.fd[1], &d.result, 1);
-     close(d.fd[1]);
 
-     d.func = (int (*)(int, char *[])) sym;
+     // We set the close on exec flag.
+     // Closing of d.fd[1] indicates that the execvp succeeded!
+     fcntl(d.fd[1], F_SETFD, FD_CLOEXEC);
+
      if (d.debug_wait)
      {
         fprintf(stderr, "kdeinit4: Suspending process\n"
@@ -720,8 +714,18 @@
         setup_tty( tty );
      }
 
-     exit( d.func(argc, d.argv)); /* Launch! */
+     QByteArray helperexe = QFile::encodeName(helperpath);
+     QByteArray libpathbytes = QFile::encodeName(libpath);
+     d.argv[argc] = libpathbytes.data();
+     d.argv[argc+1] = 0;
 
+     if (!helperexe.isEmpty())
+        execvp(helperexe, d.argv);
+
+     d.result = 1; // Error
+     write(d.fd[1], &d.result, 1);
+     close(d.fd[1]);
+     exit(255);
      break;
   }
   default:
@@ -1667,12 +1671,10 @@
          launch_klauncher = 0;
       if (strcmp(safe_argv[i], "--no-kded") == 0)
          launch_kded = 0;
-#ifdef Q_WS_MACX
       // make it nofork to match KUniqueApplication, technically command-line incompatible
       if (strcmp(safe_argv[i], "--nofork") == 0)
-#else
+         do_fork = false;
       if (strcmp(safe_argv[i], "--no-fork") == 0)
-#endif
          do_fork = false;
       if (strcmp(safe_argv[i], "--suicide") == 0)
          d.suicide = true;
@@ -1692,7 +1694,7 @@
       {
         printf("Usage: kdeinit4 [options]\n");
      // printf("    --no-dcop         Do not start dcopserver\n");
-#ifdef Q_WS_MACX
+#if (defined Q_OS_DARWIN || defined_Q_OS_MAC)
         printf("    --nofork          Do not fork\n");
 #else
         printf("    --no-fork         Do not fork\n");
@@ -1713,7 +1715,7 @@
    (void)dup2(2, 1);
 
    if (do_fork) {
-#ifdef Q_WS_MACX
+#if defined(Q_OS_DARWIN) || defined (Q_OS_MAC)
       mac_fork_and_reexec_self();
 #else
       if (pipe(d.initpipe) != 0) {
diff -Nurd kdelibs-4.5.1/kio/kfile/kfsprocess.cpp kdelibs-4.5.1-new/kio/kfile/kfsprocess.cpp
--- kdelibs-4.5.1/kio/kfile/kfsprocess.cpp	2008-05-21 07:08:03.000000000 -0400
+++ kdelibs-4.5.1-new/kio/kfile/kfsprocess.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -83,7 +83,7 @@
 
 KfsProcessController::~KfsProcessController()
 {
-#ifndef Q_OS_MAC
+#if (!defined (Q_OS_DARWIN) && !defined (Q_OS_MAC))
 /* not sure why, but this is causing lockups */
   close( m_fd[0] );
   close( m_fd[1] );
diff -Nurd kdelibs-4.5.1/kio/kfile/kpropertiesdialog.cpp kdelibs-4.5.1-new/kio/kfile/kpropertiesdialog.cpp
--- kdelibs-4.5.1/kio/kfile/kpropertiesdialog.cpp	2010-06-16 08:03:24.000000000 -0400
+++ kdelibs-4.5.1-new/kio/kfile/kpropertiesdialog.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -1812,7 +1812,7 @@
 #ifdef HAVE_GETGROUPLIST
     // pick the groups to which the user belongs
     int groupCount = 0;
-#ifdef Q_OS_MAC
+#if (defined(Q_OS_DARWIN) || defined(Q_OS_MAC))
     QVarLengthArray<int> groups;
 #else
     QVarLengthArray<gid_t> groups;
diff -Nurd kdelibs-4.5.1/kpty/kptydevice.cpp kdelibs-4.5.1-new/kpty/kptydevice.cpp
--- kdelibs-4.5.1/kpty/kptydevice.cpp	2009-03-27 10:47:33.000000000 -0400
+++ kdelibs-4.5.1-new/kpty/kptydevice.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -42,7 +42,7 @@
 # include <sys/time.h>
 #endif
 
-#if defined(Q_OS_FREEBSD) || defined(Q_OS_MAC)
+#if defined(Q_OS_FREEBSD) || defined(Q_OS_DARWIN) || defined(Q_OS_MAC)
   // "the other end's output queue size" - kinda braindead, huh?
 # define PTY_BYTES_AVAILABLE TIOCOUTQ
 #elif defined(TIOCINQ)
diff -Nurd kdelibs-4.5.1/kross/qts/CMakeLists.txt kdelibs-4.5.1-new/kross/qts/CMakeLists.txt
--- kdelibs-4.5.1/kross/qts/CMakeLists.txt	2009-07-06 07:19:27.000000000 -0400
+++ kdelibs-4.5.1-new/kross/qts/CMakeLists.txt	2010-10-01 21:39:55.000000000 -0400
@@ -8,7 +8,7 @@
     set_target_properties(krossqtsplugin PROPERTIES VERSION ${GENERIC_LIB_VERSION} SOVERSION ${GENERIC_LIB_SOVERSION})
 endif (NOT CYGWIN)
 
-install(TARGETS krossqtsplugin DESTINATION ${PLUGIN_INSTALL_DIR}/plugins/script)
+install(TARGETS krossqtsplugin EXPORT kdelibsLibraryTargets ${INSTALL_TARGETS_DEFAULT_ARGS})
 
 ########### next target ###############
 
diff -Nurd kdelibs-4.5.1/solid/solid/managerbase.cpp kdelibs-4.5.1-new/solid/solid/managerbase.cpp
--- kdelibs-4.5.1/solid/solid/managerbase.cpp	2010-07-23 17:10:47.000000000 -0400
+++ kdelibs-4.5.1-new/solid/solid/managerbase.cpp	2010-10-01 21:39:55.000000000 -0400
@@ -23,7 +23,8 @@
 
 #include "backends/fakehw/fakemanager.h"
 
-#if defined (Q_OS_MAC)
+#if (defined (Q_OS_MAC) || defined(Q_OS_DARWIN))
+#include "backends/hal/halmanager.h"
 #include "backends/iokit/iokitmanager.h"
 #elif defined (Q_OS_UNIX)
 #include "backends/hal/halmanager.h"
@@ -48,7 +49,7 @@
     if (!solidFakeXml.isEmpty()) {
         m_backends << new Solid::Backends::Fake::FakeManager(0, solidFakeXml);
     } else {
-#        if defined (Q_OS_MAC)
+#        if (defined (Q_OS_MAC) || defined(Q_OS_DARWIN))
             m_backends << new Solid::Backends::IOKit::IOKitManager(0);
 #        elif defined (Q_OS_UNIX)
             m_backends << new Solid::Backends::Hal::HalManager(0);
